{
  "cve": "CVE-2025-3328",
  "timestamp": "2025-08-05T00:30:02",
  "name": "",
  "description": "A vulnerability was found in Tenda AC1206 15.03.06.23. It has been classified as critical. Affected is the function form_fast_setting_wifi_set of the file /goform/fast_setting_wifi_set. The manipulation of the argument ssid/timeZone leads to buffer overflow. It is possible to launch the attack remotely. The exploit has been disclosed to the public and may be used. Other parameters might be affected as well.",
  "requiredaction": "",
  "metrics": {
    "cvssv2": {
      "basescore": 9.0,
      "acessvector": "NETWORK"
    },
    "cvssv30": {
      "basescore": 0.0,
      "attackvector": null
    },
    "cvssv31": {
      "basescore": 8.8,
      "attackvector": "NETWORK"
    },
    "cvssv40": {
      "basescore": 8.7,
      "attackvector": "NETWORK"
    }
  },
  "weaknesses": [
    {
      "CWE-119": {
        "name": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
        "description": "The product performs operations on a memory buffer, but it reads from or writes to a memory location outside the buffer's intended boundary. This may result in read or write operations on unexpected memory locations that could be linked to other variables, data structures, or internal program data."
      }
    },
    {
      "CWE-120": {
        "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
        "description": "The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow."
      }
    },
    {
      "CWE-787": {
        "name": "Out-of-bounds Write",
        "description": "The product writes data past the end, or before the beginning, of the intended buffer."
      }
    }
  ],
  "attackpattern": [
    {
      "CAPEC-10": {
        "name": "Buffer Overflow via Environment Variables",
        "description": "This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the adversary finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables."
      }
    },
    {
      "CAPEC-100": {
        "name": "Overflow Buffers",
        "description": "Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice."
      }
    },
    {
      "CAPEC-123": {
        "name": "Buffer Manipulation",
        "description": "An adversary manipulates an application's interaction with a buffer in an attempt to read or modify data they shouldn't have access to. Buffer attacks are distinguished in that it is the buffer space itself that is the target of the attack rather than any code responsible for interpreting the content of the buffer. In virtually all buffer attacks the content that is placed in the buffer is immaterial. Instead, most buffer attacks involve retrieving or providing more input than can be stored in the allocated buffer, resulting in the reading or overwriting of other unintended program memory."
      }
    },
    {
      "CAPEC-14": {
        "name": "Client-side Injection-induced Buffer Overflow",
        "description": "This type of attack exploits a buffer overflow vulnerability in targeted client software through injection of malicious content from a custom-built hostile service. This hostile service is created to deliver the correct content to the client software. For example, if the client-side application is a browser, the service will host a webpage that the browser loads."
      }
    },
    {
      "CAPEC-24": {
        "name": "Filter Failure through Buffer Overflow",
        "description": "In this attack, the idea is to cause an active filter to fail by causing an oversized transaction. An attacker may try to feed overly long input strings to the program in an attempt to overwhelm the filter (by causing a buffer overflow) and hoping that the filter does not fail securely (i.e. the user input is let into the system unfiltered)."
      }
    },
    {
      "CAPEC-42": {
        "name": "MIME Conversion",
        "description": "An attacker exploits a weakness in the MIME conversion routine to cause a buffer overflow and gain control over the mail server machine. The MIME system is designed to allow various different information formats to be interpreted and sent via e-mail. Attack points exist when data are converted to MIME compatible format and back."
      }
    },
    {
      "CAPEC-44": {
        "name": "Overflow Binary Resource File",
        "description": "An attack of this type exploits a buffer overflow vulnerability in the handling of binary resources. Binary resources may include music files like MP3, image files like JPEG files, and any other binary file. These attacks may pass unnoticed to the client machine through normal usage of files, such as a browser loading a seemingly innocent JPEG file. This can allow the adversary access to the execution stack and execute arbitrary code in the target process."
      }
    },
    {
      "CAPEC-45": {
        "name": "Buffer Overflow via Symbolic Links",
        "description": "This type of attack leverages the use of symbolic links to cause buffer overflows. An adversary can try to create or manipulate a symbolic link file such that its contents result in out of bounds data. When the target software processes the symbolic link file, it could potentially overflow internal buffers with insufficient bounds checking."
      }
    },
    {
      "CAPEC-46": {
        "name": "Overflow Variables and Tags",
        "description": "This type of attack leverages the use of tags or variables from a formatted configuration data to cause buffer overflow. The adversary crafts a malicious HTML page or configuration file that includes oversized strings, thus causing an overflow."
      }
    },
    {
      "CAPEC-47": {
        "name": "Buffer Overflow via Parameter Expansion",
        "description": "In this attack, the target software is given input that the adversary knows will be modified and expanded in size during processing. This attack relies on the target software failing to anticipate that the expanded data may exceed some internal limit, thereby creating a buffer overflow."
      }
    },
    {
      "CAPEC-8": {
        "name": "Buffer Overflow in an API Call",
        "description": "This attack targets libraries or shared code modules which are vulnerable to buffer overflow attacks. An adversary who has knowledge of known vulnerable libraries or shared code can easily target software that makes use of these libraries. All clients that make use of the code library thus become vulnerable by association. This has a very broad effect on security across a system, usually affecting more than one software process."
      }
    },
    {
      "CAPEC-9": {
        "name": "Buffer Overflow in Local Command-Line Utilities",
        "description": "This attack targets command-line utilities available in a number of shells. An adversary can leverage a vulnerability found in a command-line utility to escalate privilege to root."
      }
    },
    {
      "CAPEC-10": {
        "name": "Buffer Overflow via Environment Variables",
        "description": "This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the adversary finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables."
      }
    },
    {
      "CAPEC-100": {
        "name": "Overflow Buffers",
        "description": "Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice."
      }
    },
    {
      "CAPEC-14": {
        "name": "Client-side Injection-induced Buffer Overflow",
        "description": "This type of attack exploits a buffer overflow vulnerability in targeted client software through injection of malicious content from a custom-built hostile service. This hostile service is created to deliver the correct content to the client software. For example, if the client-side application is a browser, the service will host a webpage that the browser loads."
      }
    },
    {
      "CAPEC-24": {
        "name": "Filter Failure through Buffer Overflow",
        "description": "In this attack, the idea is to cause an active filter to fail by causing an oversized transaction. An attacker may try to feed overly long input strings to the program in an attempt to overwhelm the filter (by causing a buffer overflow) and hoping that the filter does not fail securely (i.e. the user input is let into the system unfiltered)."
      }
    },
    {
      "CAPEC-42": {
        "name": "MIME Conversion",
        "description": "An attacker exploits a weakness in the MIME conversion routine to cause a buffer overflow and gain control over the mail server machine. The MIME system is designed to allow various different information formats to be interpreted and sent via e-mail. Attack points exist when data are converted to MIME compatible format and back."
      }
    },
    {
      "CAPEC-44": {
        "name": "Overflow Binary Resource File",
        "description": "An attack of this type exploits a buffer overflow vulnerability in the handling of binary resources. Binary resources may include music files like MP3, image files like JPEG files, and any other binary file. These attacks may pass unnoticed to the client machine through normal usage of files, such as a browser loading a seemingly innocent JPEG file. This can allow the adversary access to the execution stack and execute arbitrary code in the target process."
      }
    },
    {
      "CAPEC-45": {
        "name": "Buffer Overflow via Symbolic Links",
        "description": "This type of attack leverages the use of symbolic links to cause buffer overflows. An adversary can try to create or manipulate a symbolic link file such that its contents result in out of bounds data. When the target software processes the symbolic link file, it could potentially overflow internal buffers with insufficient bounds checking."
      }
    },
    {
      "CAPEC-46": {
        "name": "Overflow Variables and Tags",
        "description": "This type of attack leverages the use of tags or variables from a formatted configuration data to cause buffer overflow. The adversary crafts a malicious HTML page or configuration file that includes oversized strings, thus causing an overflow."
      }
    },
    {
      "CAPEC-47": {
        "name": "Buffer Overflow via Parameter Expansion",
        "description": "In this attack, the target software is given input that the adversary knows will be modified and expanded in size during processing. This attack relies on the target software failing to anticipate that the expanded data may exceed some internal limit, thereby creating a buffer overflow."
      }
    },
    {
      "CAPEC-67": {
        "name": "String Format Overflow in syslog()",
        "description": "This attack targets applications and software that uses the syslog() function insecurely. If an application does not explicitely use a format string parameter in a call to syslog(), user input can be placed in the format string parameter leading to a format string injection attack. Adversaries can then inject malicious format string commands into the function call leading to a buffer overflow. There are many reported software vulnerabilities with the root cause being a misuse of the syslog() function."
      }
    },
    {
      "CAPEC-8": {
        "name": "Buffer Overflow in an API Call",
        "description": "This attack targets libraries or shared code modules which are vulnerable to buffer overflow attacks. An adversary who has knowledge of known vulnerable libraries or shared code can easily target software that makes use of these libraries. All clients that make use of the code library thus become vulnerable by association. This has a very broad effect on security across a system, usually affecting more than one software process."
      }
    },
    {
      "CAPEC-9": {
        "name": "Buffer Overflow in Local Command-Line Utilities",
        "description": "This attack targets command-line utilities available in a number of shells. An adversary can leverage a vulnerability found in a command-line utility to escalate privilege to root."
      }
    },
    {
      "CAPEC-92": {
        "name": "Forced Integer Overflow",
        "description": "This attack forces an integer variable to go out of range. The integer variable is often used as an offset such as size of memory allocation or similarly. The attacker would typically control the value of such variable and try to get it out of range. For instance the integer in question is incremented past the maximum possible value, it may wrap to become a very small, or negative number, therefore providing a very incorrect value which can lead to unexpected behavior. At worst the attacker can execute arbitrary code."
      }
    }
  ],
  "published": "2025-04-07T01:15:42"
}