{
  "cve": "CVE-2025-30024",
  "name": "",
  "description": "The communication protocol used between client\nand server had a flaw that could be leveraged to execute a man in the middle attack.",
  "requiredaction": "",
  "epss_score": 0.00035,
  "metrics": {
    "cvssv2": {
      "basescore": 0.0,
      "acessvector": null
    },
    "cvssv30": {
      "basescore": 0.0,
      "attackvector": null
    },
    "cvssv31": {
      "basescore": 6.8,
      "attackvector": "NETWORK"
    },
    "cvssv40": {
      "basescore": 0.0,
      "attackvector": null
    }
  },
  "weaknesses": [
    {
      "CWE-295": {
        "name": "Improper Certificate Validation",
        "description": "The product does not validate, or incorrectly validates, a certificate."
      }
    }
  ],
  "attackpattern": [
    {
      "CAPEC-459": {
        "name": "Creating a Rogue Certification Authority Certificate",
        "description": "An adversary exploits a weakness resulting from using a hashing algorithm with weak collision resistance to generate certificate signing requests (CSR) that contain collision blocks in their \"to be signed\" parts. The adversary submits one CSR to be signed by a trusted certificate authority then uses the signed blob to make a second certificate appear signed by said certificate authority. Due to the hash collision, both certificates, though different, hash to the same value and so the signed blob works just as well in the second certificate. The net effect is that the adversary's second X.509 certificate, which the Certification Authority has never seen, is now signed and validated by that Certification Authority."
      }
    },
    {
      "CAPEC-475": {
        "name": "Signature Spoofing by Improper Validation",
        "description": "An adversary exploits a cryptographic weakness in the signature verification algorithm implementation to generate a valid signature without knowing the key."
      }
    }
  ],
  "exploit": [],
  "published": "2025-07-11T06:15:24"
}